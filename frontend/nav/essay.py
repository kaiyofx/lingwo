import streamlit as st
from openai import OpenAI
from random import sample
import httpx, os

prompt_correct = """
Исправь данного сочинения или добавь к нему что-то, что может исправить недочеты или усилить его по критерям и требованиям.
При этом, оставь основную суть сочинения. Выдели измененную или добавленную часть следующим образом: :rainbow-background[измененная или добавленная часть текста]

Требования:
1. Объем итогового сочинения.

Рекомендуемое количество слов – от 350.
Максимальное количество слов в сочинении не устанавливается. Если в сочинении
менее 250 слов (в подсчет включаются все слова, в том числе служебные), то выставляется
«незачет» за невыполнение требования № 1 и «незачет» за работу в целом (такое итоговое
сочинение не проверяется по требованию № 2 «Самостоятельность написания итогового
сочинения» и критериям оценивания).

2. Самостоятельность написания итогового сочинения.

Итоговое сочинение выполняется самостоятельно. Не допускается списывание
сочинения (фрагментов сочинения) из какого-либо источника или воспроизведение по
памяти чужого текста (работа другого участника, текст, опубликованный в бумажном и (или)
электронном виде, и др.).
Допускается прямое или косвенное цитирование с обязательной ссылкой на источник
(ссылка дается в свободной форме). Объем цитирования не должен превышать объем
собственного текста участника итогового сочинения.
Если сочинение признано несамостоятельным, то выставляется «незачет» за
невыполнение требования № 2 и «незачет» за работу в целом (такое сочинение не проверяется
по критериям оценивания).
Итоговое сочинение, соответствующее установленным требованиям, оценивается по
критериям:
1. «Соответствие теме»;
2. «Аргументация. Привлечение литературного материала»;
3. «Композиция и логика рассуждения»;
4. «Качество письменной речи»;
5. «Грамотность».

Критерии:
1. Соответствие теме.

Данный критерий нацеливает на проверку содержания сочинения.
Участник должен рассуждать на предложенную тему, выбрав путь ее раскрытия
(например, отвечает на вопрос, поставленный в теме, или размышляет над предложенной
проблемой и т.п.).
«Незачет» ставится только в случае, если сочинение не соответствует теме, в нем нет
ответа на вопрос, поставленный в теме, или в сочинении не прослеживается конкретной цели
высказывания. Во всех остальных случаях выставляется «зачет».

2. Аргументация. Привлечение литературного материала.

Данный критерий нацеливает на проверку умения строить рассуждение, доказывать
свою позицию, формулируя аргументы и подкрепляя их примерами из опубликованных
литературных произведений. Можно привлекать произведения устного народного творчества
(за исключением малых жанров), художественную, документальную, мемуарную,
публицистическую, научную и научно-популярную литературу (в том числе философскую,
психологическую, литературоведческую, искусствоведческую), дневники, очерки,
литературную критику и другие произведения отечественной и мировой литературы
(достаточно опоры на один текст).
«Незачет» ставится при условии, если сочинение не содержит аргументации, написано
без опоры на литературный материал, или в нем существенно искажено содержание
выбранного текста, или литературный материал лишь упоминается в работе (аргументы
примерами не подкрепляются). Во всех остальных случаях выставляется «зачет».

3. Композиция и логика рассуждения.

Данный критерий нацеливает на проверку умения логично выстраивать рассуждение
на предложенную тему. Участник должен выдерживать соотношение между тезисом и
доказательствами.
«Незачет» ставится при условии, если грубые логические нарушения мешают
пониманию смысла сказанного или отсутствует тезисно-доказательная часть. Во всех
остальных случаях выставляется «зачет».

4. Качество письменной речи.

Данный критерий нацеливает на проверку речевого оформления текста сочинения.
Участник должен точно выражать мысли, используя разнообразную лексику и
различные грамматические конструкции, при необходимости уместно употреблять термины.
«Незачет» ставится при условии, если низкое качество речи (в том числе речевые
ошибки) существенно затрудняет понимание смысла сочинения. Во всех остальных случаях
выставляется «зачет».

5. Грамотность

Данный критерий позволяет оценить грамотность выпускника.
«Незачет» ставится при условии, если на 100 слов в среднем приходится в сумме более
пяти ошибок: грамматических, орфографических, пунктуационных.

Для получения «зачета» за итоговое сочинение необходимо
получить «зачет» по критериям № 1 и № 2, а также дополнительно «зачет» по одному из критериев № 3 или № 4. На оценку сочинения по Критерию № 5 распространяются положения о негрубых, повторяющихся и
однотипных ошибках. При подсчете ошибок негрубые ошибки не учитываются.

Тема: {0}

Текст сочинения: {1}
"""

criteries = """
Соответствие теме выделено :blue-background[синим]\n
Аргументация, привлечение литературного материала выделена :green-background[зеленым]\n
Композиция и логика рассуждения выделена :orange-background[оранжевым]
"""

prompt_area = """
Выдели участки текста определенным цветом, где соблюден соответствующий критерий, если данный критерий
нигде в течении текста не будет выполнен, то данный цвет выделения критерия можно пропустить.
Если есть необходимость, можешь выделить таких участков несколько, но необязательно. Участком может
являться словосочетание, предложение или несколько предложений. Замени выбранную часть текстом вида -
':color-background[text]', где вместо color - один из 5 цветов, соответствующий данному критерию,
а вместо text вставляешь выбранный участок текста без одинарных кавычек.

Критерии:
1. Соответствие теме.

Данный критерий нацеливает на проверку содержания сочинения.
Участник должен рассуждать на предложенную тему, выбрав путь ее раскрытия
(например, отвечает на вопрос, поставленный в теме, или размышляет над предложенной
проблемой и т.п.).

2. Аргументация. Привлечение литературного материала.

Данный критерий нацеливает на проверку умения строить рассуждение, доказывать
свою позицию, формулируя аргументы и подкрепляя их примерами из опубликованных
литературных произведений. Можно привлекать произведения устного народного творчества
(за исключением малых жанров), художественную, документальную, мемуарную,
публицистическую, научную и научно-популярную литературу (в том числе философскую,
психологическую, литературоведческую, искусствоведческую), дневники, очерки,
литературную критику и другие произведения отечественной и мировой литературы
(достаточно опоры на один текст).

3. Композиция и логика рассуждения.

Данный критерий нацеливает на проверку умения логично выстраивать рассуждение
на предложенную тему. Участник должен выдерживать соотношение между тезисом и
доказательствами.

Выполнение критерия №1 - это цвет 'blue'
Выполнение критерия №2 - это цвет 'green'
Выполнение критерия №3 - это цвет 'orange'

Выведи ТОЛЬКО исходный текст сочинения с дополнительной заменой его частей без темы и лишних комментариев.

Тема: {0}

Текст сочинения: {1}

"""

prompt_estimate = """
Твоя задача - оценить и проанализировать сочинение ученика на заданную тему по определенным критериям.
Также проверь текст на требования, если они не будут выполнены - автоматические ставиться незачет.
Предоставь подробный отзыв с указанием сильных и слабых сторон данного сочинения, а также советы для его улучшения (если такие имеются).

Требования:
1. Объем итогового сочинения.

Рекомендуемое количество слов – от 350.
Максимальное количество слов в сочинении не устанавливается. Если в сочинении
менее 250 слов (в подсчет включаются все слова, в том числе служебные), то выставляется
«незачет» за невыполнение требования № 1 и «незачет» за работу в целом (такое итоговое
сочинение не проверяется по требованию № 2 «Самостоятельность написания итогового
сочинения» и критериям оценивания).

2. Самостоятельность написания итогового сочинения.

Итоговое сочинение выполняется самостоятельно. Не допускается списывание
сочинения (фрагментов сочинения) из какого-либо источника или воспроизведение по
памяти чужого текста (работа другого участника, текст, опубликованный в бумажном и (или)
электронном виде, и др.).
Допускается прямое или косвенное цитирование с обязательной ссылкой на источник
(ссылка дается в свободной форме). Объем цитирования не должен превышать объем
собственного текста участника итогового сочинения.
Если сочинение признано несамостоятельным, то выставляется «незачет» за
невыполнение требования № 2 и «незачет» за работу в целом (такое сочинение не проверяется
по критериям оценивания).
Итоговое сочинение, соответствующее установленным требованиям, оценивается по
критериям:
1. «Соответствие теме»;
2. «Аргументация. Привлечение литературного материала»;
3. «Композиция и логика рассуждения»;
4. «Качество письменной речи»;
5. «Грамотность».

Критерии:
1. Соответствие теме.

Данный критерий нацеливает на проверку содержания сочинения.
Участник должен рассуждать на предложенную тему, выбрав путь ее раскрытия
(например, отвечает на вопрос, поставленный в теме, или размышляет над предложенной
проблемой и т.п.).
«Незачет» ставится только в случае, если сочинение не соответствует теме, в нем нет
ответа на вопрос, поставленный в теме, или в сочинении не прослеживается конкретной цели
высказывания. Во всех остальных случаях выставляется «зачет».

2. Аргументация. Привлечение литературного материала.

Данный критерий нацеливает на проверку умения строить рассуждение, доказывать
свою позицию, формулируя аргументы и подкрепляя их примерами из опубликованных
литературных произведений. Можно привлекать произведения устного народного творчества
(за исключением малых жанров), художественную, документальную, мемуарную,
публицистическую, научную и научно-популярную литературу (в том числе философскую,
психологическую, литературоведческую, искусствоведческую), дневники, очерки,
литературную критику и другие произведения отечественной и мировой литературы
(достаточно опоры на один текст).
«Незачет» ставится при условии, если сочинение не содержит аргументации, написано
без опоры на литературный материал, или в нем существенно искажено содержание
выбранного текста, или литературный материал лишь упоминается в работе (аргументы
примерами не подкрепляются). Во всех остальных случаях выставляется «зачет».

3. Композиция и логика рассуждения.

Данный критерий нацеливает на проверку умения логично выстраивать рассуждение
на предложенную тему. Участник должен выдерживать соотношение между тезисом и
доказательствами.
«Незачет» ставится при условии, если грубые логические нарушения мешают
пониманию смысла сказанного или отсутствует тезисно-доказательная часть. Во всех
остальных случаях выставляется «зачет».

4. Качество письменной речи.

Данный критерий нацеливает на проверку речевого оформления текста сочинения.
Участник должен точно выражать мысли, используя разнообразную лексику и
различные грамматические конструкции, при необходимости уместно употреблять термины.
«Незачет» ставится при условии, если низкое качество речи (в том числе речевые
ошибки) существенно затрудняет понимание смысла сочинения. Во всех остальных случаях
выставляется «зачет».

5. Грамотность

Данный критерий позволяет оценить грамотность выпускника.
«Незачет» ставится при условии, если на 100 слов в среднем приходится в сумме более
пяти ошибок: грамматических, орфографических, пунктуационных.

Для получения «зачета» за итоговое сочинение необходимо
получить «зачет» по критериям № 1 и № 2, а также дополнительно «зачет» по одному из критериев № 3 или № 4. На оценку сочинения по Критерию № 5 распространяются положения о негрубых, повторяющихся и
однотипных ошибках. При подсчете ошибок негрубые ошибки не учитываются.



Тема: {0}

Текст сочинения: {1}
"""

if len(os.environ['OPENAI_API_KEY']) == 0:
    st.write('Пожалуйста, укажите в локальных переменных ваш `OPENAI_API_KEY`')
    exit(1)

OPENAI_API_KEY = os.environ['OPENAI_API_KEY']
if len(os.environ['PROXY_SERVER_URL']) != 0:
    client = OpenAI(api_key=OPENAI_API_KEY, http_client=httpx.Client(proxy=os.environ['PROXY_SERVER_URL']))
else:
    client = OpenAI(api_key=OPENAI_API_KEY)


def correctQuery():
     return client.chat.completions.create(
        model="gpt-4o",
        messages=[
            {
                "role": "system",
                "content": "Ты - филолог по русского языка со стажем более 50-и лет."
            },
            {
                "role": "user",
                "content": prompt_correct.format(st.session_state['theme'], st.session_state['essay'])
            }
        ],
        stream=True
    )

def estimateQuery():
     return client.chat.completions.create(
        model="gpt-4o",
        messages=[
            {
                "role": "system",
                "content": "Ты - филолог по русского языка со стажем более 50-и лет."
            },
            {
                "role": "user",
                "content": prompt_estimate.format(st.session_state['theme'], st.session_state['essay'])
            }
        ],
        stream=True
    )

def areaQuery():
    return client.chat.completions.create(
        model="gpt-4o",
        messages=[
            {
                "role": "system",
                "content": "Ты - филолог по русского языка со стажем более 50-и лет."
            },
            {
                "role": "user",
                "content": prompt_area.format(st.session_state['theme'], st.session_state['essay'])
            }
        ],
        stream=True
    )

def store_value(key):
    st.session_state[key] = st.session_state["_"+key]

def load_value(key):
    st.session_state["_"+key] = st.session_state[key]

def start_write_theme(theme : str):
    st.session_state['theme'] = theme
    st.session_state['essay_status'] = 'write'

def generate():
    st.session_state['generated_themes'] = generate_themes(st.session_state['selected_themes'])

def sendEssay(essay : str):
    st.session_state['essay'] = essay
    st.session_state['essay_status'] = 'sent'

def cancelEssay():
    if 'generated_themes' in st.session_state:
        del st.session_state['generated_themes']
    if 'theme' in st.session_state:
        del st.session_state['theme']
    for key in st.session_state.keys():
        if key.startswith('essay'):
            del st.session_state[key]
    st.session_state['essay_status'] = 'wait'

@st.dialog('Корректировки', width='large')
def modalCorrect():
    st.write(':gray[*Цветом Лингво выделил места корректировок*]')
    if 'essay_correct' in st.session_state: st.write(st.session_state['essay_correct'])
    else: st.session_state['essay_correct'] = st.write_stream(correctQuery())

@st.dialog('Отчет о сочинении', width='large')
def modalReport():
    if 'essay_report' in st.session_state: st.write(st.session_state['essay_report'])
    else: st.session_state['essay_report'] = st.write_stream(estimateQuery())

def canStartNewEssay():
    return st.session_state['essay_status'] == 'wait'

def main():
    with st.sidebar:
        selected_themes = st.text_area('Укажите разделы для предложений тем сочинений (каждый раздел с новой строки)', height=200, value=st.session_state['selected_themes'])
        if selected_themes:
            st.session_state['selected_themes'] = selected_themes

    if st.session_state['essay_status'] == 'wait':
        st.title(':rainbow-background[Сгенерируйте идею с Лингво]')
        mc1,mc2 = st.columns([0.6, 0.4])
        mc1.button('Сгенерировать тему', on_click=generate)

        writing_theme = mc2.text_input('Введите тему для сочинения', max_chars=100)
        if writing_theme:
            mc2.button('Начать', type='primary', on_click=start_write_theme, args=[writing_theme])

        if 'generated_themes' in st.session_state:
            selected_theme = mc1.radio('Выберите одну из предложенных тем', st.session_state['generated_themes'])
            mc1.button('Начать с выбранной темой', type='primary', on_click=start_write_theme, args=[selected_theme])
    
    if st.session_state['essay_status'] == 'write':
        st.title('Выполните задание')
        st.write(f"**Тема** - :blue[{st.session_state['theme']}]")
        essay = st.text_area('Напишите текст-рассуждение по выбранной теме', height=300)
        c1,c2 = st.columns([1,1])
        if essay:
            c1.button('Отправить на проверку', type='primary', on_click=sendEssay, args=[essay])
        else:
            c1.write(":gray[*Начните вводить текст*]")
        c2.button('Отменить без проверки', on_click=cancelEssay)
    
    if st.session_state['essay_status'] == 'sent':
        st.title(':rainbow-background[Лингво] подготовил для вас чек-лист')
        
        st.write(criteries)
        st.divider()
        if 'essay_area' in st.session_state:
            st.write(st.session_state['essay_area'])
        else:
            st.session_state['essay_area'] = st.write_stream(areaQuery())

        c1, c2, c3 = st.columns([1,1,1])
        c1.button('Открыть подробный отчет', type='primary', on_click=modalReport)

        c2.button('Корректировать', on_click=modalCorrect)
        c3.button('Вернуться на главную', on_click=cancelEssay)

def generate_themes(selects):
    generated_themes = st.session_state.themes_collection.query(query_texts=selects, n_results=60)['documents'][0]
    if len(generated_themes) < 6:
        st.write('Не удалось загрузить БД. Пожалуйста, попробуйте позже...')

    return sample(generated_themes, 6)

main()